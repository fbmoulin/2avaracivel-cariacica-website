import os
import json
import logging
from openai import OpenAI
from services.integration_service import RetryManager, with_integration
import time

class ChatbotService:
    """Service for handling chatbot interactions"""
    
    def __init__(self):
        self.openai_client = None
        self.setup_openai()
        self.predefined_responses = self.load_predefined_responses()
    
    def setup_openai(self):
        """Initialize OpenAI client if API key is available"""
        api_key = os.environ.get("OPENAI_API_KEY")
        if api_key:
            try:
                self.openai_client = OpenAI(api_key=api_key)
                logging.info("OpenAI client initialized successfully")
            except Exception as e:
                logging.error(f"Failed to initialize OpenAI client: {e}")
                self.openai_client = None
        else:
            logging.info("OpenAI API key not found, using predefined responses")
    
    def load_predefined_responses(self):
        """Load predefined responses for common questions"""
        return {
            'horario': {
                'response': 'A 2¬™ Vara C√≠vel de Cariacica funciona das 12h √†s 18h, de segunda a sexta-feira.',
                'keywords': ['horario', 'funcionamento', 'abertura', 'fechamento', 'hor√°rio']
            },
            'endereco': {
                'response': 'A 2¬™ Vara C√≠vel de Cariacica est√° localizada na Rua Expedito Garcia, s/n, Centro, Cariacica - ES, CEP: 29140-060.',
                'keywords': ['endereco', 'localiza√ß√£o', 'onde', 'fica', 'endere√ßo', 'local']
            },
            'telefone': {
                'response': 'Para contato:\nüìû Telefone: (27) 3246-8200\nüìß Email: 2varacivel.cariacica@tjes.jus.br\nüí¨ WhatsApp: Dispon√≠vel pelo telefone principal',
                'keywords': ['telefone', 'contato', 'ligar', 'email', 'whatsapp']
            },
            'processo': {
                'response': 'Para consultar seu processo:\n1. Acesse a consulta processual em nosso site\n2. Digite o n√∫mero do processo no formato CNJ\n3. Ou consulte no portal do TJES: www.tjes.jus.br\n\nüìã Tenha em m√£os o n√∫mero completo do processo.',
                'keywords': ['processo', 'consulta', 'andamento', 'n√∫mero', 'cnj']
            },
            'audiencia': {
                'response': 'Informa√ß√µes sobre audi√™ncias:\nüé• Virtuais: Link enviado por email\nüèõÔ∏è Presenciais: Compare√ßa no hor√°rio marcado\nüìÖ Reagendamento: Entre em contato conosco\n\n‚úâÔ∏è Instru√ß√µes detalhadas s√£o enviadas por email.',
                'keywords': ['audiencia', 'virtual', 'presencial', 'online', 'reuni√£o']
            },
            'agendamento': {
                'response': 'Para agendar atendimento:\nüåê Online: Acesse nossa p√°gina de agendamento\nüìû Telefone: (27) 3246-8200\n‚è∞ Hor√°rio: Das 12h √†s 18h\n\nüìù Tenha seus documentos em m√£os.',
                'keywords': ['agendamento', 'agendar', 'marcar', 'atendimento', 'hor√°rio']
            },
            'documentos': {
                'response': 'Solicita√ß√£o de documentos:\nüìú Certid√µes e documentos dispon√≠veis\nüåê Alguns servi√ßos online\nüèõÔ∏è Atendimento presencial necess√°rio para alguns casos\n\nüìã Documentos necess√°rios: RG, CPF e comprovantes.',
                'keywords': ['documentos', 'certid√£o', 'certid√µes', 'segunda via', 'c√≥pia']
            },
            'mediacao': {
                'response': 'Servi√ßos de Media√ß√£o e Concilia√ß√£o:\nü§ù Resolu√ß√£o amig√°vel de conflitos\nüìÖ Agendamento dispon√≠vel\nüë©‚Äç‚öñÔ∏è Mediadores qualificados\n\nüìû Entre em contato para agendar.',
                'keywords': ['mediacao', 'concilia√ß√£o', 'acordo', 'resolver', 'media√ß√£o']
            },
            'cumprimento': {
                'response': 'Cumprimento de Senten√ßa:\n‚öñÔ∏è Acompanhe pelo n√∫mero do processo\nüìã Consulte andamentos no portal\nüìû D√∫vidas: Entre em contato conosco\n\nüîç Use a consulta processual para atualiza√ß√µes.',
                'keywords': ['cumprimento', 'senten√ßa', 'execu√ß√£o', 'cobran√ßa']
            },
            'prazos': {
                'response': 'Informa√ß√µes sobre Prazos:\nüìÖ Prazos processuais variam conforme o tipo\n‚öñÔ∏è Consulte seu advogado para orienta√ß√µes espec√≠ficas\nüîç Acompanhe pelo sistema processual\n\n‚è∞ Fique atento aos prazos para n√£o perder direitos.',
                'keywords': ['prazo', 'prazos', 'tempo', 'vencimento', 'data']
            },
            'agendamento': {
                'response': 'Agendamento de Atendimento:\nüìÖ Dispon√≠vel de segunda a sexta, 12h √†s 18h\nüìû Telefone: (27) 3246-8200\nüíª Tamb√©m pelo nosso portal online\n\nüìù Tenha em m√£os documentos necess√°rios para o atendimento.',
                'keywords': ['agendamento', 'agendar', 'marcar', 'atendimento', 'horario']
            },
            'documentos': {
                'response': 'Documentos e Certid√µes:\nüìã Certid√µes de objeto e p√©\nüìÑ Cartas de senten√ßa\nüèõÔ∏è Documentos processuais\nüìû Solicite pelo telefone (27) 3246-8200\n\nüí∞ Consulte taxas e prazos no atendimento.',
                'keywords': ['documento', 'documentos', 'certidao', 'certid√£o', 'papel', 'carta']
            }
        }
    
    def find_predefined_response(self, user_message):
        """Find matching predefined response based on keywords"""
        normalized_message = user_message.lower().strip()
        
        # Score each predefined response based on keyword matches
        best_match = None
        best_score = 0
        
        for category, data in self.predefined_responses.items():
            score = 0
            for keyword in data['keywords']:
                if keyword in normalized_message:
                    score += 1
            
            if score > best_score:
                best_score = score
                best_match = data['response']
        
        return best_match if best_score > 0 else None
    
    def get_response(self, user_message):
        """Get chatbot response for user message"""
        try:
            # Check for predefined responses first
            predefined_response = self.find_predefined_response(user_message)
            if predefined_response:
                return predefined_response
            
            # Use OpenAI if available
            if self.openai_client:
                return self.get_openai_response(user_message)
            
            # Default response
            return self.get_default_response()
            
        except Exception as e:
            logging.error(f"Error getting chatbot response: {e}")
            return "Desculpe, ocorreu um erro. Tente novamente ou entre em contato conosco diretamente."
    
    @RetryManager.with_retry(max_attempts=2, backoff_factor=1.2, initial_delay=0.5)
    def get_openai_response(self, user_message):
        """Get response from OpenAI API optimized for production deployment"""
        try:
            start_time = time.time()
            
            # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
            # do not change this unless explicitly requested by the user
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": """Voc√™ √© o assistente virtual da 2¬™ Vara C√≠vel de Cariacica do Tribunal de Justi√ßa do Esp√≠rito Santo.

INFORMA√á√ïES B√ÅSICAS:
‚Ä¢ Hor√°rio: 12h √†s 18h, segunda a sexta-feira
‚Ä¢ Endere√ßo: Rua Expedito Garcia, s/n, Centro, Cariacica-ES, CEP: 29140-060
‚Ä¢ Telefone: (27) 3246-8200
‚Ä¢ Email: 2varacivel.cariacica@tjes.jus.br

COMPET√äNCIAS DA VARA:
‚Ä¢ A√ß√µes c√≠veis em geral
‚Ä¢ Execu√ß√µes de t√≠tulo extrajudicial
‚Ä¢ Cumprimento de senten√ßa
‚Ä¢ A√ß√µes de cobran√ßa
‚Ä¢ Contratos e responsabilidade civil
‚Ä¢ Media√ß√£o e concilia√ß√£o

SERVI√áOS DISPON√çVEIS:
‚Ä¢ Consulta processual online
‚Ä¢ Agendamento de atendimento
‚Ä¢ Audi√™ncias presenciais e virtuais
‚Ä¢ Solicita√ß√£o de certid√µes
‚Ä¢ Balc√£o virtual
‚Ä¢ Servi√ßos de media√ß√£o

INSTRU√á√ïES:
‚Ä¢ Seja sempre cordial e profissional
‚Ä¢ Forne√ßa informa√ß√µes precisas e atualizadas
‚Ä¢ Para d√∫vidas espec√≠ficas sobre processos, oriente consulta pelo n√∫mero CNJ
‚Ä¢ Em caso de urg√™ncia, indique contato telef√¥nico
‚Ä¢ Use formata√ß√£o clara com emojis quando apropriado
‚Ä¢ Mantenha respostas concisas mas completas"""
                    },
                    {"role": "user", "content": user_message[:500]}
                ],
                max_tokens=300,  # Increased for more complete responses
                temperature=0.7,
                timeout=25,      # Balanced timeout for quality responses
                stream=False     # Ensure deployment compatibility
            )
            
            response_time = time.time() - start_time
            logging.info(f"OpenAI API response time: {response_time:.2f}s")
            
            # Validate response
            if response.choices and response.choices[0].message.content:
                return response.choices[0].message.content.strip()
            else:
                logging.warning("Empty OpenAI response, using fallback")
                return self.get_fallback_response(user_message)
            
        except Exception as e:
            logging.error(f"OpenAI deployment error: {e}")
            return self.get_fallback_response(user_message)
    
    def get_fallback_response(self, user_message):
        """Fallback response when OpenAI is not available"""
        normalized_message = user_message.lower()
        
        # More comprehensive keyword matching
        if any(word in normalized_message for word in ['horario', 'hora', 'funcionamento', 'aberto']):
            return self.predefined_responses['horario']['response']
        elif any(word in normalized_message for word in ['endereco', 'endere√ßo', 'localiza√ß√£o', 'onde', 'local']):
            return self.predefined_responses['endereco']['response']
        elif any(word in normalized_message for word in ['telefone', 'contato', 'falar', 'ligar']):
            return self.predefined_responses['telefone']['response']
        elif any(word in normalized_message for word in ['processo', 'consulta', 'numero', 'cnj']):
            return self.predefined_responses['processo']['response']
        elif any(word in normalized_message for word in ['audiencia', 'audi√™ncia', 'zoom', 'virtual']):
            return self.predefined_responses['audiencia']['response']
        
        return self.get_default_response()
    
    def get_default_response(self):
        """Default response when no specific match is found"""
        return """Ol√°! Sou o assistente virtual da 2¬™ Vara C√≠vel de Cariacica. 
        Posso ajudar com informa√ß√µes sobre:
        ‚Ä¢ Hor√°rio de funcionamento
        ‚Ä¢ Localiza√ß√£o e contato
        ‚Ä¢ Consulta processual
        ‚Ä¢ Agendamento de atendimento
        ‚Ä¢ Audi√™ncias
        ‚Ä¢ Documentos e certid√µes
        
        Como posso ajud√°-lo hoje?"""
